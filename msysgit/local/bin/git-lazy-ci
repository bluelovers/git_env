#!/bin/perl

BEGIN
{
#	open "STDERR", "> ~ci.errors.txt" or die "Could not write to ~ci.errors.txt: $!\n";

	open MYSTDERR, "> ~ci.errors.txt" or die "Could not write to ~ci.errors.txt: $!\n";
}

END
{
	do_end();

	exit;
}

use File::Basename qw(dirname basename);

{
	local $file = __FILE__;
	$file =~ s/\\/\//g;
	unshift @INC, dirname($file);
};

use Time::HiRes qw(time usleep gettimeofday);
use POSIX qw(mktime ctime);
use Data::Dumper;
use Switch;
#use Scalar::Util qw(looks_like_number);

use constant false => 0;
use constant true  => 1;

require 'lib/git.pm';

my @file;
$file[0] = '~ci.list.txt';
$file[1] = '~ci.log.txt';
$file[2] = <~/COMMIT_EDITMSG>;

#`clear`;

#print "git-Lazy Commit Each Change Script!!\n";
do_log("git-Lazy Commit Each Change Script!!\n");

my %map =
(
	'??' => 'Untracked files',

	' M' => 'modified - Changes not staged for commit',
	' R' => 'renamed - Changes not staged for commit',
	' D' => 'deleted - Changes not staged for commit',
	' A' => 'new file - Changes not staged for commit',

	'M ' => 'modified',
	'R ' => 'renamed',
	'D ' => 'deleted',
	'A ' => 'new file',

);

my @map_sort = ('R ', 'M ', 'A ', 'D ', ' R', ' M', ' A', ' D', '??');

#my @file;
#$file[0] = '~ci.list.txt';
#$file[1] = '~ci.log.txt';
#$file[2] = <~/COMMIT_EDITMSG>;

my $chk_work = 0;

do_start();

my $commit_count = 0;

#my $commit_msg = trim(shift @ARGV);
#my $commit_mode = shift @ARGV;
#my $output_list_mode = shift @ARGV;

#$commit_msg = trim_lf($commit_msg);
#
#if ($output_list_mode eq '')
#{
#	$output_list_mode = 2;
#}

my $commit_msg = getOption('--msg');
my $commit_mode = getOption('--log');
my $output_list_mode = getOption('--no-ff');

#print_r(%params);

my $br_now = git_current_br();
my $br_name = 'git-lazy-ci/' . getupdateDay();

#print $commit_msg;
#exit;

my %list_rename;
my $output = '';
my $output_all = '';
my %list = git_status(0);

open(FILE, "> $file[0]") || die("Cannot open file: $file[0]");

#$output = $output . log_r(%list_rename);
#$output = $output . "\n\n\n";
#$output = $output . log_r(%list);
#
#$output = trim_lf($output);

$output_all = $output = git_output_all();

print FILE $output;

close(FILE);

if (!$commit_msg || $commit_msg eq '')
{
	open(FILE2, "> $file[2]") || die("Cannot open file: $file[2]");

		$output =~ s/\n/\n#/g;

		if ($output ne '')
		{
			print FILE2 "\n#$output\n\n";
		}

	close(FILE2);

	`notepad "$file[2]"`;

	open (FILE2, $file[2]);
	while (<FILE2>){
		my $_c = substr $_, 0, 1;
		next if ($_c eq '#');
		$commit_msg = $commit_msg . rtrim($_) . "\n";
	}
	close(FILE2);

	$commit_msg = trim_lf($commit_msg);
}

if (!$commit_msg || $commit_msg eq '')
{
	$chk_work = 1;

#	print "\nAborting commit due to empty commit message.\n";
	do_log("\nAborting commit due to empty commit message.");
	exit;
}

$chk_work = 0;

#print "\n4.==============\n";
#print log_r(%list);
#
#exit;

#print "\nStart...\n";

do_log("-----------------------------", 0);
do_log("Start...");

print "\n";

do_log("You are now on branch '${br_now}'");

do_cmd("git checkout -b \"${br_name}\"", 0, true);

do_log("=============================", 0);
git_loop();

if (!$commit_count)
{
	do_log("\nFailed: nothing commit.\n");
}

print "\n";

do_log("=============================", 0);

do_cmd("git checkout \"${br_now}\"", 0, true);

my $fastforward = '';

if ($commit_count > 1 && $commit_count > $output_list_mode && $output_list_mode > 0)
{
	do_cmd("git merge --no-ff \"${br_name}\"", 0, true);
}
elsif ($commit_count > 0)
{
	$fastforward = 'fast-forward ';

	do_cmd("git merge \"${br_name}\"", 0, true);
}

do_cmd("git branch -d \"${br_name}\"", 0, true);

do_log("\nSummary of actions:");
do_log("- The lazy branch '${br_name}' was ${fastforward}merged into '${br_now}'");
do_log("- Lazy branch '${br_name}' is deleted");
do_log("- You are now on branch '${br_now}'");
do_log("- Total Step: ${commit_count}");

#print "\n...End.";
do_log("-----------------------------", 0);
do_log("\n...End.");

$chk_work = 1;

DOCLOSE:

do_end();

exit;

sub git_loop()
{
	my $i = 1;

	foreach my $_m (@map_sort)
	{
		next if !($list_rename{$_m});

#		print "\n\[$_m\] $map{$_m}:\n\n";
		do_log("\n\[$_m\] $map{$_m}:\n");

		foreach my $_v (@{$list_rename{$_m}})
		{
#			print "[$i]\t$_v\n";
			do_log("[$i]\t$_v");

			my ($_o, $_n) = split(' -> ', $_v);

			my $_t;

#			$_t = `git rm --ignore-unmatch --cached $_o`;
##			$_t = `git mv "$_o" "$_n"`;
#			$_t = `git add $_n`;

			$_t = do_cmd("git rm --ignore-unmatch --cached ${_o}", 0, true);
			$_t = do_cmd("git add ${_n}", 0, true);
		}

			my %list_add;

			if (1)
			{
				%list_add = git_status(2);
			}
			else
			{
				%list_add = git_status(1);
			}

			my $output_list = log_r(%list_add);

			next if ($output_list eq '');

			open(FILE2, "> $file[2]") || die("Cannot open file: $file[2]");

			if ($commit_msg ne '')
			{

			}
			else
			{
				$commit_msg = "Files Rename:";
			}

			print FILE2 $commit_msg;

			if (!($commit_msg =~ m/\n/))
			{
				print FILE2 " (Step: $i)";
			}

			print FILE2 "\n\n";
#			print FILE2 "git-Lazy Commit Each Change Script\n\nOutput:\n\n";
			print FILE2 "Step: $i\n\n";


			if ($output_list)
			{
				if ($output_list_mode)
				{
#					print FILE2 $output_list;
					print FILE2 $output_all;
				}
			}
			else
			{
				next;
			}

			close(FILE2);

			$cmd = "git commit -F $file[2]";
##			$cmd = "git commit -o . -F \"$file[2]\" --dry-run";
#
##			print "${cmd}\n";
#			my $log_ci = `$cmd`;
#
#			open(FILE1, "> $file[1]") || die("Cannot open file: $file[1]");
#			print FILE1 $log_ci;
#			close(FILE1);

			my $log_ci = do_cmd($cmd, 0);

			$i++;
	}

	foreach my $_m (@map_sort)
	{
		next if !($list{$_m});

#		print "\n\[$_m\] $map{$_m}:\n\n";
		do_log("\n\[$_m\] $map{$_m}:\n");

		if ($_m =~ m/D/ && getOption('--no-del'))
		{
			do_log("\t\"--no-del\" is set, skip all deleted.");

			next;
		}

		foreach my $_v (@{$list{$_m}})
		{
#			print "[$i]\t$_v\n";
			do_log("[$i]\t$_v");

			$cmd = '';

			my $_v2 = $_v;
#			$_v2 =~ s/\\/\\\\/g;

			if ($_m =~ m/D/)
			{
				$cmd = "git rm --ignore-unmatch --cached $_v2";
			}
			elsif ($_m ne '??')
			{
				$cmd = "git add --ignore-errors $_v2";
			}

			next if ($cmd eq '');

##			print "${cmd}\n";
#			my $log_ci = `$cmd`;

			my $log_ci = do_cmd($cmd, 0, true);

			my %list_add;

			if (1)
			{
				%list_add = git_status(2);
			}
			else
			{
				%list_add = git_status(1);
			}

			my $output_list = log_r(%list_add);

			next if ($output_list eq '');

			open(FILE2, "> $file[2]") || die("Cannot open file: $file[2]");

			if ($commit_msg ne '')
			{

			}
			else
			{
				$commit_msg = "File: $_v";
			}

			print FILE2 $commit_msg;

			if (!($commit_msg =~ m/\n/))
			{
				print FILE2 " (Step: $i)";
			}

			print FILE2 "\n\n";
#			print FILE2 "git-Lazy Commit Each Change Script\n\nOutput:\n\n";
			print FILE2 "Step: $i\n\n";


			if ($output_list)
			{
				if ($output_list_mode)
				{
#					print FILE2 $output_list;
					print FILE2 $output_all;
				}
			}
			else
			{
				next;
			}

			close(FILE2);

			$cmd = "git commit -F \"$file[2]\"";
##			$cmd = "git commit -o . -F \"$file[2]\" --dry-run";
#
##			print "${cmd}\n";
#			my $log_ci = `$cmd`;
#
#			open(FILE1, "> $file[1]") || die("Cannot open file: $file[1]");
#			print FILE1 $log_ci;
#			close(FILE1);

			my $log_ci = do_cmd($cmd, 0);

			$i++;
		}
	}

	if ($i > 1)
	{
		$commit_count = $i - 1;
	}

#	if (0 || !$commit_mode)
#	{
#		unlink $file[0];
#		unlink $file[1];
#	}
}

sub git_output_all()
{
	my $output;

	$output = $output . log_r(%list_rename);
	$output = $output . "\n\n\n";
	$output = $output . log_r(%list);

	$output = trim_lf($output);

	return $output;
}

sub git_renames(%)
{
	my %list = @_;
	my @map_skip = ('D', 'A');
	my %list_skip = (
		' D' => (),
		' A' => (),
	);

	my @map_rename;

#	print "\n1.==============\n";
#
#	print log_r(%list);
#
#	print "\n0.==============\n";

	my %list_all = git_status(-1);

#	print log_r(%list_all);

	foreach my $_m (keys %list_all)
	{
		if ($_m =~ m/R/)
		{
			foreach my $_v (@{$list_all{$_m}})
			{
				my @_s = split('->', $_v);

				$_s[0] = trim($_s[0]);
				$_s[1] = trim($_s[1]);

				push @{$list_skip{' D'}}, $_s[0];
				push @{$list_skip{' A'}}, $_s[1];

				$map_rename{'D'}{$_s[0]} = $_s[1];
				$map_rename{'A'}{$_s[1]} = $_s[0];

				push @{$list_skip{$_m}}, $_v;
			}
		}
	}

#	print "\n9.==============\n";
#
#	foreach my $_m (keys %map_rename)
#	{
#		print "$_m:\n";
#
#		foreach my $_k (keys %{$map_rename{$_m}})
#		{
#			my $_v = $map_rename{$_m}{$_k};
#			print "$_k => $_v\n";
#		}
#	}

#	print "\n2.==============\n";
#
#	print log_r(%list_skip);

	foreach my $_m (keys %list)
	{
#
#		if ($_m =~ m/A/)
#		{
#			my ($union_ref, $isec_ref, $diff_ref, $aonly_ref, $bonly_ref) = ArrayFunctions(\@{$list{$_m}}, \@{$list_skip{' A'}});
#
#			@{$list{$_m}} = @bonly_ref;
#
#			print @union_ref;
#		}
#		elsif ($_m =~ m/D/)
#		{
#			my ($union_ref, $isec_ref, $diff_ref, $aonly_ref, $bonly_ref) = ArrayFunctions(\@{$list{$_m}}, \@{$list_skip{' D'}});
#
#			@{$list{$_m}} = @aonly_ref;
#		}

		if ($_m =~ m/A/)
		{
			my $_k = trim($_m);
			my @temp;

			foreach my $_v (@{$list{$_m}})
			{
				if (exists $map_rename{$_k}{$_v})
				{
					push @{$list_rename{' R'}}, $map_rename{$_k}{$_v} . ' -> ' . $_v;
				}
				else
				{
					push @temp, $_v;
				}
			}

			if ($#temp >= 0)
			{
				@{$list{$_m}} = @temp;
			}
			else
			{
				delete $list{$_m};
			}
		}
		elsif ($_m =~ m/D/)
		{
			my $_k = trim($_m);
			my @temp = ();

			foreach my $_v (@{$list{$_m}})
			{
				if (exists $map_rename{$_k}{$_v})
				{
					push @{$list_rename{' R'}}, $_v . ' -> ' . $map_rename{$_k}{$_v};
				}
				else
				{
					push @temp, $_v;
				}
			}

			if ($#temp >= 0)
			{
				@{$list{$_m}} = @temp;
			}
			else
			{
				delete $list{$_m};
			}
		}
		elsif ($_m =~ m/R/)
		{
			my $_k = trim($_m);
			my @temp;

			foreach my $_v (@{$list{$_m}})
			{
				push @{$list_rename{$_m}}, $_v;
			}

			if ($#temp > 0)
			{
				@{$list{$_m}} = @temp;
			}
			else
			{
				delete $list{$_m};
			}
		}

	}

#	print "3.==============\n";
#
#	print log_r(%list);

	return %list;
}

sub array_remove ( \@& )
{
    my ( $arr_ref, $test_block ) = @_;
    my $sp_start  = 0;
    my $sp_len    = 0;
    for ( my $inx = 0; $inx <= $#arr_ref; $inx++ )
    {
        local $_ = $arr_ref->[$inx];
        next unless $test_block eq $_;
        if ( $sp_len > 0 && $inx > $sp_start + $sp_len )
        {
            splice( @$arr_ref, $sp_start, $sp_len );
            $inx    = $inx - $sp_len;
            $sp_len = 0;
        }
        $sp_start = $inx if ++$sp_len == 1;
    }
    splice( @$arr_ref, $sp_start, $sp_len ) if $sp_len > 0;
    return;
}

sub git_status()
{
	my $mode = shift @_;
	my $text;

#	print "\nmode: $mode\n";

	if ($mode > 1)
	{
#		$text = `git commit -m . --dry-run --short`;

		$text = do_cmd("git commit -m . --dry-run --short", 0);
	}
	elsif ($mode < 0)
	{
#		`git add -A`;
#		$text = `git commit -m . --dry-run --short -o .`;
#		`git reset HEAD`;

		do_cmd("git add -A .", 0);
		$text = do_cmd("git commit -m . --dry-run --short -o .", 0);
		do_cmd("git reset HEAD", 0);
	}
	else
	{
#		$text = `git status -s .`;
		$text = do_cmd("git status -s .", 0);
	}
	my @text = split("\n", $text);

	my %list;

#	print $mode;

	foreach (@text)
	{
		my $_k = substr $_, 0, 2;
		my $_v = substr $_, 3;

		my $_k0 = substr $_k, 0, 1;
		my $_k1 = substr $_k, 1, 1;

		if ($mode > 0)
		{
			$do_next = 1;

			if ($_k1 eq ' ')
			{
				$do_next = 0;
			}
		}
		elsif (!$commit_mode && $_k eq '??')
		{
			$do_next = 1;
		}
		else
		{
			$do_next = 0;
		}

#		print "$_k0 ${do_next} $_k1";
#		print "\n";

		next if $do_next;

		push @{$list{$_k}}, $_v;
	}

	if ($mode == 0)
	{
		%list = git_renames(%list);
	}

	return %list;
}

sub log_r(%)
{
	my %list = @_;

	my $text = '';

	foreach my $_m (@map_sort)
	{
		next if !($list{$_m});

		if ($_m eq '??')
		{
#			print "\nskip $mode1 , $_m\n";

			next;
		}

		$text = $text . "\[$_m\] $map{$_m}:\n\n";

		foreach my $_v (@{$list{$_m}})
		{
			$text = $text . "\t$_v\n";
		}

		$text = $text . "\n";

	}

	$text = trim_lf($text);

	return $text;
}

# Perl trim function to remove whitespace from the start and end of the string
sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

# Left trim function to remove leading whitespace
sub ltrim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	return $string;
}

# Right trim function to remove trailing whitespace
sub rtrim($)
{
	my $string = shift;
	$string =~ s/\s+$//;
	return $string;
}

sub trim_lf($)
{
	my $string = shift;
	$string =~ s/^\n+//;
	$string =~ s/\n+$//;
	$string =~ s/[ \t\r]+\n/\n/g;
	$string =~ s/\n\n\n+/\n\n/g;
	return $string;
}

sub ArrayFunctions
{
	my $a_ref = shift; # reference to
	my @a = @$a_ref; # input array

	my $b_ref = shift; # reference to
	my @b = @$b_ref; # input array

	@Aseen{@a} = (); # lookup table
	@Bseen{@b} = (); # lookup table

	@isec = @diff = @union = @aonly = @bonly = (); # create null

	foreach $e (@a, @b) { $count{$e}++ } # put all

	foreach $e (keys %count) { # interate
		push(@union, $e); # keys of hash

		if ($count{$e} == 2) {
			push @isec, $e; # seen more

		} else {
			push @diff, $e; # seen once =

			push(@aonly, $e) unless exists $Bseen{$e}; # seen once +

			push(@bonly, $e) unless exists $Aseen{$e}; # seen once +
		}
	}
	return (@union, @isec, @diff, @aonly, @bonly); # return
}

sub getupdateDay{
	my $sp = shift || "/";
	my $cp = shift || ":";
	my $ap = " - ";

	$cp = $sp = '';
	$ap = '/';
	my $yp = '/';

	my ($seconds, $microseconds) = gettimeofday();

	return $seconds . '.' . $microseconds;

	my @gmtime = gmtime($seconds);

	my @localtime = localtime($seconds);

	my $offset = 0 - ((mktime(@gmtime) - $seconds) / 3600);

	@localtime = @gmtime;

	$localtime[4]++;
	$localtime[5] += 1900;

	for (my $i=0; $i<@localtime; $i++){
		$localtime[$i] = "0".$localtime[$i] if ($localtime[$i] < 10);
	}

#	return "$localtime[3]".$sp."$localtime[4]".$sp."$localtime[5]";
	return $localtime[5].$yp.$localtime[4].$sp.$localtime[3].$ap.$localtime[2].$cp.$localtime[1].$cp.$localtime[0].'.'.$microseconds.'-GMT';
}

sub git_current_br
{
	return trim_lf(`git rev-parse --abbrev-ref HEAD`);
}

sub git_current_commit_id
{
	return trim_lf(`git rev-parse HEAD`);
}

sub git_branch_is_empty
{
	# fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
	my $log_ci = git_current_commit_id();

	return ($log_ci =~ m/fatal/);
}

sub do_log
{
	my $log_ci = shift;
	my $show = shift;

	if ($log_ci)
	{
		$log_ci = $log_ci."\n";

		if ($show eq '' || $show)
		{
			print $log_ci;
		}
		print FILE1 $log_ci;
	}

	return $log_ci;
}

sub do_cmd()
{
	our $test_mode;

	my $cmd = shift;
	my $show = shift;
	my $log_ci = '';

	my $test = shift && $test_mode;

	if ($cmd)
	{
#		open(FILE1, "> $file[1]") || die("Cannot open file: $file[1]");

#		print FILE1 "-----------------------------\n";

		do_log('-----------------------------', 0);

		if ($test)
		{
			$test = '[TEST MODE]\t';
		}
		else
		{
			$test = '';
		}

		if ($show eq '' || $show)
		{
			print "\n${test}${cmd}\n";
		}

#		print FILE1 "\$\t${cmd}\n";
		do_log("${test}\$\t${cmd}", 0);

		if (!$test)
		{
			$log_ci = `$cmd`;
		}

		$log_ci =~ s/^\n+//;
		$log_ci =~ s/\n+$//;

		if ($log_ci ne '')
		{
#			print FILE1 "\n${log_ci}\n\n";
			do_log("\n${log_ci}\n", 0);
		}

#		close(FILE1);
	}

	return $log_ci;
}

sub do_start
{
	open(FILE1, "> $file[1]") || die("Cannot open file: $file[1]");

	our %params = parseCmdLine(@ARGV);

	fixOptions();

	if (getOption('--help'))
	{
		$chk_work = 1;

		show_help();

		exit;
	}

	if (git_branch_is_empty())
	{
		$chk_work = 1;

		do_log("\nAborting current branch is empty.");
		exit;
	}

#	print_r(@ARGV);

	# not safe test
	our $test_mode = getOption('--test');

#	exit;
}

sub show_help
{
	local $\ = "\n";

	my $show = "\t@<<<<<<<<<<<<<<<<<<<<<<<@";

	print "Usage: git-lazy-ci <commit_msg> [options...]";
	print "Usage: git-lazy-ci <commit_msg> [<number>, <number>]\n";
	print swrite2($show, ['--msg <commit_msg>']) . "set commit msg";
	print swrite2($show, ['--log']);
	print swrite2($show, ['--no-ff [<number>]']);
	print swrite2($show, ['--help']) . "show help";
	print swrite2($show, ['--ff']);
	print swrite2($show, ['--test']);
	print swrite2($show, ['--no-del']);
}

sub println
{
	local $\ = "\n";
	print @_;
}

sub log_error
{
	my $log_ci = shift;
	my $show = shift;

	if ($log_ci)
	{
		$log_ci = $log_ci."\n";

		if ($show eq '' || $show)
		{
			print $log_ci;
		}
		print MYSTDERR $log_ci;
	}

	return $log_ci;
}

sub do_end
{
	print "\n";

	my $clear = 0 || !$commit_mode;

	if ($chk_work != 1)
	{
		log_error("\n...Error: something happend... (${chk_work})");

		$clear = 0;
	}

	close(FILE);
	close(FILE1);
	close(FILE2);
	close(MYSTDERR);

	if ($clear)
	{
		unlink $file[0];
		unlink $file[1];

		unlink '~ci.errors.txt';
	}
}

sub parseCmdLine
{
	my @cmd_line = @_;
	my $param;
	my $param_last;
	my $param_value;
	my %params;
	my $n = 0;

	my $found_msg = 0;

	$params{'params'} = {
		'--ff' => false,
		'--no-ff' => 2,
	};

	my $is_old = true;

	my @help = qw(--h --help --?);

	foreach my $param (@cmd_line)
	{
		$params{'argv'}[$n] = $param;

		my $is_else = false;

		if ($is_old && $found_msg && !is_number($param))
		{
			$is_old = false;
		}

		if ($param_value && $param =~ /^--\S+$/)
		{
			$param_value = false;
		}

		switch ($param)
		{
			case '--no-ff'
			{
				$params{'params'}{'--ff'} = false;
			}
			case '--ff'
			{
				$params{'params'}{$param} = true;
			}
			case '--msg'
			{
				$param_value = true;
			}
			case (@help)
			{
				$params{'params'}{'--help'} = true;
			}
			else
			{
				my $param_key = $param;

				if ($param_value || (is_number($param) && $param_last =~ /^--\S+$/))
				{
					$param_key = $param_last;

					if ($found_msg)
					{

					}

					$params{'params'}{$param_key} = $param;
				}
				elsif ($found_msg)
				{
					if ($is_old)
					{
						switch ($n)
						{
							case 1
							{
								$param_key = '--log';
							}
							case 2
							{
								$param_key = '--no-ff';
							}
							else
							{

							}
						};
					}

					$params{'params'}{$param_key} = $param;
				}
				else
				{
					$param_key = '--msg';

					$params{'params'}{$param_key} = $param;
					$found_msg = true;
				}

				if ($param_key eq '--msg')
				{
					$found_msg = true;
				}

				$param_value = false;
			}
		};

		$param_last = $param;
		$n++;
	}

#	print_r(%params);

	return %params;
}

sub fixOptions
{
	our %params;

	$params{'params'}{'--msg'} = trim_lf($params{'params'}{'--msg'});

	if ($params{'params'}{'--ff'})
	{
		$params{'params'}{'--no-ff'} = -1;
	}

	if (!is_number($params{'params'}{'--no-ff'}))
	{
		$params{'params'}{'--no-ff'} = 2;
	}
}

sub getOption
{
	my $param_key = $_[0];

	return $params{'params'}{$param_key};
}

sub print_r
{
	return print Dumper(@_);
}

sub is_number
{
#	return looks_like_number(shift);

	return defined $_[0] && $_[0] =~ /^[+-]?\d+$/;
}

sub in_array
{
     my ($arr, $search_for) = @_;
     return grep {$search_for eq $_} @$arr;
}

sub swrite
{
	my $result = '';
	for (my $i = 0; $i < @_; $i += 2)
	{
		my $format = $_[$i];
		my @args = @{$_[$i+1]};
		if ($format =~ /@[<|>]/)
		{
			$^A = '';
			formline($format, @args);
			$result .= "$^A\n";
		}
		else
		{
			$result .= "$format\n";
		}
	}
	$^A = '';
	return $result;
}

sub swrite2
{
	my $result = '';
	for (my $i = 0; $i < @_; $i += 2)
	{
		my $format = $_[$i];
		my @args = @{$_[$i+1]};
		if ($format =~ /@[<|>]/)
		{
			$^A = '';
			formline($format, @args);
			$result .= "$^A";
		}
		else
		{
			$result .= "$format";
		}
	}
	$^A = '';
	return $result;
}

exit;
